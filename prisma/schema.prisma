// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id Int @id @default(autoincrement())
  role Role @default(WORKER)
  name String
  password String
  lastName String?
  address String?
  email String @unique
  phoneNumber String @unique
  createdAt DateTime @default(now())
  bio String?
  categories JobType[]
  updatedAt DateTime @updatedAt
  jobs Job[] @relation(name: "creator")
  jobOffers JobOffer[]
  jobsDone Job[] @relation("job_done")

  ratings Rating[]
  ratingGiven Rating[] @relation("ratings_given")

  conversations Conversation[]

  currentlyWorkingOn Job[] @relation("working_on")

  @@map("users")

}

enum Role {
  WORKER
  ADMIN
}

model Job {
  id Int @id @default(autoincrement())
  name String
  description String
  category JobType
  createdAt DateTime @default(now())
  date DateTime
  price Float 
  priceType PriceType @default(WHOLE)
  currency Currency @default(RSD)
  amount Float?
  location String
  status JobStatus @default(ACTIVE)
  withoutMonitoring Boolean @default(false)

  userId Int
  user User @relation(fields: [userId], references: [id], name: "creator")

  userThatDidTheJobId Int?
  userThatDidTheJob User? @relation(fields: [userThatDidTheJobId], references: [id], name: "job_done")

  currentlyWorkingOnUserId Int?
  currentlyWorkingOnUser User? @relation(fields: [currentlyWorkingOnUserId], references: [id], name: "working_on")

  jobOffers JobOffer[]

  hasAcceptedOffer Boolean? @default(false)
  acceptedOfferId Int?

  
  @@map("jobs")
}


model JobOffer{
  id Int @id @default(autoincrement())
  description String
  price Float 
  expired Boolean @default(false)
  priceType PriceType @default(WHOLE)
  currency Currency @default(RSD)
  amount Float?

  userId Int
  user   User @relation(fields: [userId], references: [id])

  jobId Int
  job   Job @relation(fields: [jobId], references: [id])
}


model Rating{
  id Int @id @default(autoincrement())
  description String
  rating Float

  userRatedId Int
  userRated User @relation(fields: [userRatedId], references: [id])

  ratingGiverId Int
  ratingGiverUser User @relation(fields: [ratingGiverId], references: [id], name: "ratings_given")

  createdAt DateTime @default(now())
}


model Conversation{
  id Int @id @default(autoincrement())
  participants User[]
  messages Message[]
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())


  @@map("conversations")

}

model Message{
    id Int @id @default(autoincrement())
    conversationId Int
    conversation Conversation @relation(fields: [conversationId],references: [id])
    senderId Int
    receiverId Int
    content String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt


  @@map("messages")

}

enum Currency{
  RSD
  EUR
  USD
  CHF
}

enum JobStatus{
  ACTIVE
  IN_PROGRESS
  DONE
  ABORTED
}

enum PriceType{
  WHOLE
  PER_HOUR
  PER_M2
  PER_DAY
}




enum JobType {
  ELECTRICS
  PLUMBING
  PAINTING
  GARDENING
  CLEANING
}

